package cmd

import (
    "fmt"
    "os"
    "path/filepath"
    "strings"
    "regexp"
    "hash/fnv"

    "github.com/spf13/cobra"
)

var serviceName string
var database string

var createCmd = &cobra.Command{
    Use:   "create",
    Short: "Create a new Java microservice",
    Long:  "Generate a production-ready Spring Boot microservice with Docker and CI/CD",
    Run: func(cmd *cobra.Command, args []string) {
        if serviceName == "" {
            fmt.Println("‚ùå Service name is required. Use --name flag")
            return
        }
        
        fmt.Printf("üöÄ Creating Java microservice: %s\n", serviceName)
        createJavaService(serviceName)
        fmt.Printf("‚úÖ Service %s created successfully!\n", serviceName)
    },
}

func init() {
    rootCmd.AddCommand(createCmd)
    createCmd.Flags().StringVarP(&serviceName, "name", "n", "", "Service name (required)")
    createCmd.Flags().StringVarP(&database, "db", "d", "", "Database type (postgres, mysql)")
    createCmd.MarkFlagRequired("name")
}

// Funci√≥n para normalizar nombres (quitar guiones, espacios, caracteres especiales)
func normalizeJavaName(name string) string {
    // Remover guiones, espacios y otros caracteres especiales
    reg := regexp.MustCompile(`[^a-zA-Z0-9]`)
    cleaned := reg.ReplaceAllString(name, "")
    
    // Convertir primera letra a may√∫scula
    if len(cleaned) > 0 {
        cleaned = strings.ToUpper(string(cleaned[0])) + strings.ToLower(cleaned[1:])
    }
    
    return cleaned
}

// Funci√≥n para normalizar package names (solo min√∫sculas, sin caracteres especiales)
func normalizePackageName(name string) string {
    reg := regexp.MustCompile(`[^a-zA-Z0-9]`)
    cleaned := reg.ReplaceAllString(name, "")
    return strings.ToLower(cleaned)
}

// Funci√≥n para generar puerto √∫nico basado en el nombre del servicio
func generateServicePort(serviceName string) int {
    h := fnv.New32a()
    h.Write([]byte(serviceName))
    // Puerto entre 8080-8999 para evitar conflictos
    return 8080 + int(h.Sum32()%920)
}

func generateDBPort(serviceName, dbType string) int {
    h := fnv.New32a()
    h.Write([]byte(serviceName + dbType))
    
    switch dbType {
    case "postgres":
        return 5432 + int(h.Sum32()%100) // 5432-5531
    case "mysql":
        return 3306 + int(h.Sum32()%100) // 3306-3405
    default:
        return 5432
    }
}

func createJavaService(name string) {
    baseDir := name
    packageName := normalizePackageName(name)
    
    // Crear estructura de directorios
    dirs := []string{
        filepath.Join(baseDir, "src", "main", "java", "com", packageName),
        filepath.Join(baseDir, "src", "test", "java", "com", packageName),
        filepath.Join(baseDir, "src", "main", "resources"),
        filepath.Join(baseDir, ".github", "workflows"),
    }

    for _, dir := range dirs {
        os.MkdirAll(dir, 0755)
    }

    // Generar archivos
    generatePomXML(baseDir, name, packageName)
    generateMainClass(baseDir, name, packageName)
    generateApplicationProperties(baseDir, name, packageName)
    generateDockerfile(baseDir)
    generateDockerCompose(baseDir, name, packageName)
    generateGitHubActions(baseDir, name)
    
    fmt.Printf("üìÅ Created directory structure for %s\n", name)
    if database != "" {
        fmt.Printf("üóÑÔ∏è  Added %s database configuration\n", database)
    }
}

func generatePomXML(baseDir, name, packageName string) {
    var dbDependencies string
    
    if database == "postgres" {
        dbDependencies = `        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>`
    } else if database == "mysql" {
        dbDependencies = `        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>`
    }

    content := fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>

    <groupId>com.%s</groupId>
    <artifactId>%s</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>%s</name>
    <description>Microservice generated by JavaForge</description>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
%s
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>`, packageName, name, normalizeJavaName(name), dbDependencies)
    
    os.WriteFile(filepath.Join(baseDir, "pom.xml"), []byte(content), 0644)
}

func generateMainClass(baseDir, name, packageName string) {
    className := normalizeJavaName(name) + "Application"
    
    content := fmt.Sprintf(`package com.%s;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@RestController
public class %s {

    public static void main(String[] args) {
        SpringApplication.run(%s.class, args);
    }

    @GetMapping("/health")
    public String health() {
        return "üöÄ %s is running!";
    }
}`, packageName, className, className, normalizeJavaName(name))
    
    filePath := filepath.Join(baseDir, "src", "main", "java", "com", packageName, className+".java")
    os.WriteFile(filePath, []byte(content), 0644)
}

func generateApplicationProperties(baseDir, name, packageName string) {
    servicePort := generateServicePort(name)
    var content string
    
    if database == "postgres" {
        dbPort := generateDBPort(name, "postgres")
        content = fmt.Sprintf(`# %s Configuration
server.port=%d

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:%d/%s
spring.datasource.username=$${DB_USERNAME:user}
spring.datasource.password=$${DB_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Management endpoints
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always`, normalizeJavaName(name), servicePort, dbPort, packageName)
    } else if database == "mysql" {
        dbPort := generateDBPort(name, "mysql")
        content = fmt.Sprintf(`# %s Configuration
server.port=%d

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:%d/%s
spring.datasource.username=$${DB_USERNAME:user}
spring.datasource.password=$${DB_PASSWORD:password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Management endpoints
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always`, normalizeJavaName(name), servicePort, dbPort, packageName)
    } else {
        content = fmt.Sprintf(`# %s Configuration
server.port=%d

# Management endpoints
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always`, normalizeJavaName(name), servicePort)
    }
    
    os.WriteFile(filepath.Join(baseDir, "src", "main", "resources", "application.properties"), []byte(content), 0644)
}

func generateDockerfile(baseDir string) {
    content := `FROM eclipse-temurin:17-jdk AS builder
WORKDIR /app
COPY pom.xml .
COPY src ./src
RUN mvn clean package -DskipTests

FROM eclipse-temurin:17-jre
WORKDIR /app
COPY --from=builder /app/target/*.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]`
    
    os.WriteFile(filepath.Join(baseDir, "Dockerfile"), []byte(content), 0644)
}

func generateDockerCompose(baseDir, name, packageName string) {
    servicePort := generateServicePort(name)
    var content string
    
    if database == "postgres" {
        dbPort := generateDBPort(name, "postgres")
        content = fmt.Sprintf(`version: '3.8'
services:
  %s:
    build: .
    ports:
      - "%d:%d"
    environment:
      - DB_USERNAME=user
      - DB_PASSWORD=password
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:%d/%s
    depends_on:
      - postgres

  postgres:
    image: postgres:15
    ports:
      - "%d:%d"
    environment:
      - POSTGRES_DB=%s
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:`, packageName, servicePort, servicePort, dbPort, packageName, dbPort, dbPort, packageName)
    } else if database == "mysql" {
        dbPort := generateDBPort(name, "mysql")
        content = fmt.Sprintf(`version: '3.8'
services:
  %s:
    build: .
    ports:
      - "%d:%d"
    environment:
      - DB_USERNAME=user
      - DB_PASSWORD=password
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:%d/%s
    depends_on:
      - mysql

  mysql:
    image: mysql:8.0
    ports:
      - "%d:%d"
    environment:
      - MYSQL_DATABASE=%s
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_ROOT_PASSWORD=rootpassword
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  mysql_data:`, packageName, servicePort, servicePort, dbPort, packageName, dbPort, dbPort, packageName)
    } else {
        content = fmt.Sprintf(`version: '3.8'
services:
  %s:
    build: .
    ports:
      - "%d:%d"`, packageName, servicePort, servicePort)
    }
    
    os.WriteFile(filepath.Join(baseDir, "docker-compose.yml"), []byte(content), 0644)
}

func generateGitHubActions(baseDir, name string) {
    content := fmt.Sprintf(`name: Build and Test %s

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: $${{ runner.os }}-m2-$${{ hashFiles('**/pom.xml') }}
        restore-keys: $${{ runner.os }}-m2
    
    - name: Run tests
      run: mvn clean test
    
    - name: Build application
      run: mvn clean package -DskipTests`, normalizeJavaName(name))
    
    os.WriteFile(filepath.Join(baseDir, ".github", "workflows", "ci.yml"), []byte(content), 0644)
}