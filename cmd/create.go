package cmd

import (
    "fmt"
    "os"
    "path/filepath"
    "strings"

    "github.com/spf13/cobra"
)

var serviceName string

var createCmd = &cobra.Command{
    Use:   "create",
    Short: "Create a new Java microservice",
    Long:  "Generate a production-ready Spring Boot microservice with Docker and CI/CD",
    Run: func(cmd *cobra.Command, args []string) {
        if serviceName == "" {
            fmt.Println("‚ùå Service name is required. Use --name flag")
            return
        }
        
        fmt.Printf("üöÄ Creating Java microservice: %s\n", serviceName)
        createJavaService(serviceName)
        fmt.Printf("‚úÖ Service %s created successfully!\n", serviceName)
    },
}

func init() {
    rootCmd.AddCommand(createCmd)
    createCmd.Flags().StringVarP(&serviceName, "name", "n", "", "Service name (required)")
    createCmd.MarkFlagRequired("name")
}

func createJavaService(name string) {
    // Crear estructura de directorios
    baseDir := name
    dirs := []string{
        filepath.Join(baseDir, "src", "main", "java", "com", strings.ToLower(name)),
        filepath.Join(baseDir, "src", "test", "java", "com", strings.ToLower(name)),
        filepath.Join(baseDir, "src", "main", "resources"),
        filepath.Join(baseDir, ".github", "workflows"),
    }

    for _, dir := range dirs {
        os.MkdirAll(dir, 0755)
    }

    // Generar archivos
    generatePomXML(baseDir, name)
    generateMainClass(baseDir, name)
    generateDockerfile(baseDir)
    generateGitHubActions(baseDir, name)
    
    fmt.Printf("üìÅ Created directory structure for %s\n", name)
}

func generatePomXML(baseDir, name string) {
    content := fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.%s</groupId>
    <artifactId>%s</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>%s</name>
    <description>Microservice generated by JavaForge</description>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <spring.boot.version>3.2.0</spring.boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring.boot.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
            </plugin>
        </plugins>
    </build>
</project>`, strings.ToLower(name), name, name)
    
    os.WriteFile(filepath.Join(baseDir, "pom.xml"), []byte(content), 0644)
}

func generateMainClass(baseDir, name string) {
    className := strings.Title(name) + "Application"
    content := fmt.Sprintf(`package com.%s;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@RestController
public class %s {

    public static void main(String[] args) {
        SpringApplication.run(%s.class, args);
    }

    @GetMapping("/health")
    public String health() {
        return "üöÄ %s is running!";
    }
}`, strings.ToLower(name), className, className, name)
    
    filePath := filepath.Join(baseDir, "src", "main", "java", "com", strings.ToLower(name), className+".java")
    os.WriteFile(filePath, []byte(content), 0644)
}

func generateDockerfile(baseDir string) {
    content := `FROM eclipse-temurin:17-jdk AS builder
WORKDIR /app
COPY pom.xml .
COPY src ./src
RUN ./mvnw clean package -DskipTests

FROM eclipse-temurin:17-jre
WORKDIR /app
COPY --from=builder /app/target/*.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]`
    
    os.WriteFile(filepath.Join(baseDir, "Dockerfile"), []byte(content), 0644)
}

func generateGitHubActions(baseDir, name string) {
    content := fmt.Sprintf(`name: Build and Test %s

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Run tests
      run: mvn clean test
    
    - name: Build application
      run: mvn clean package -DskipTests`, name)
    
    os.WriteFile(filepath.Join(baseDir, ".github", "workflows", "ci.yml"), []byte(content), 0644)
}